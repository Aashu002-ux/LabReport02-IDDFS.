def iddfs(maze, start, target, max_depth):
    rows, cols = len(maze), len(maze[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  
    
    def dls(x, y, depth, path, visited):
        if (x, y) == target:
            return path
        if depth == 0:
            return None
        
        visited.add((x, y))
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited:
                result = dls(nx, ny, depth - 1, path + [(nx, ny)], visited)
                if result:
                    return result
        visited.remove((x, y))
        return None
    
    for depth in range(max_depth + 1):
        visited = set()
        path = dls(start[0], start[1], depth, [start], visited)
        if path:
            print(f"Path found at depth {depth} using IDDFS")
            print("Traversal Order:", path)
            return
    
    print(f"Path not found at max depth {max_depth} using IDDFS")

dimensions = list(map(int, input().split()))
maze = [list(map(int, input().split())) for _ in range(dimensions[0])]

start = tuple(map(int, input().replace("Start: ", "").split()))
target = tuple(map(int, input().replace("Target: ", "").split()))

iddfs(maze, start, target, max_depth=6)
